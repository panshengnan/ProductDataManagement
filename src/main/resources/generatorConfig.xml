<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<generatorConfiguration>
    <classPathEntry

    location="C:\Users\37753\.m2\repository\postgresql\postgresql\9.1-901-1.jdbc4\postgresql-9.1-901-1.jdbc4.jar"/>
    <context id="sysGenerator" targetRuntime="MyBatis3Simple">
        <commentGenerator>
            <!-- 是否生成注释代时间戳 -->
            <property name="suppressDate" value="true"/>
            <!--是否去除自动生成的注释 true：是 ： false:否-->
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>
        <!--数据库连接的信息：驱动类、连接地址、用户名、密码-->
        <jdbcConnection driverClass="org.postgresql.Driver"
                        connectionURL="jdbc:postgresql://127.0.0.1:5432/pdm?useUnicode=true&amp;characterEncoding=utf-8"
                        userId="postgres"
                        password="123456">
        </jdbcConnection>
        <!--默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和
            NUMERIC 类型解析为java.math.BigDecimal-->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>
        <!--targetProject:生成PO类的位置-->
        <javaModelGenerator targetPackage="com.cgwx.data.entity"
                            targetProject="src\main\java">
            <!--该属性只对MyBatis3有效，如果true就会使用构造方法入参，如果false就会使用setter方式，默认为false-->
            <property name="constructorBased" value="false"/>
            <!--如果true，MBG会根据catalog和schema来生成子包，如果false就会直接用targetPackage属性，默认为false-->
            <property name="enableSubPackages" value="false"/>
            <!--该属性用来配置实体类属性是否可变，如果设置为true，那么constructorBased不管设置成什么，都会使用构造方法入参，并且不会生成setter方法，如果为false，实体类属性就可以改变，默认为false-->
            <property name="immutable" value="false"/>
            <!--从数据库返回的值被清理前后的空格-->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>
        <!--targetProject:mapper映射文件生成的位置-->
        <sqlMapGenerator targetPackage="com.cgwx.dao"
                         targetProject="src\main\resources">
            <!--enableSubPackages:是否让schema作为包的后缀-->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--targetPackage：mapper接口生成的位置-->
        <javaClientGenerator type="XMLMAPPER"
                             targetPackage="com.cgwx.dao"
                             targetProject="src\main\java">
            <!--enableSubPackages：是否让schema作为包的后缀-->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>
        <!--指定数据库表
        该元素包含多个可选属性：
            schema：数据库的schema,可以使用SQL通配符匹配。如果设置了该值，生成SQL的表名会变成如schema.tableName的形式
            catalog：数据库的catalog，如果设置了该值，生成SQL的表名会变成如catalog.tableName的形式
            alias：如果指定，这个值会用在生成的select查询SQL的表的别名和列名上。 列名会被别名为 alias_actualColumnName(别名_实际列名) 这种模式
            domainObjectName：生成对象的基本名称。如果没有指定，MBG会自动根据表名来生成名称
            enableXXX：XX代表多种SQL方法，该属性用来指定是否生成对应的XXX语句
            selectByPrimaryKeyQueryId：DBA跟踪工具会用到，具体请看详细文档
            selectByExampleQueryId：DBA跟踪工具会用到，具体请看详细文档
            modelType：和<context>的defaultModelType含义一样，这里可以针对表进行配置，这里的配置会覆盖<context>的defaultModelType配置
            escapeWildcards：这个属性表示当查询列，是否对schema和表名中的SQL通配符 ('_' and '%') 进行转义。 对于某些驱动当schema或表名中包含SQL通配符时（例如，一个表名是MY_TABLE，有一些驱动需要将下划线进行转义）是必须的，默认值是false
            delimitIdentifiers：是否给标识符增加**分隔符**,默认false，当catalog,schema或tableName中包含空白时，默认为true，
            delimitAllColumns：是否对所有列添加**分隔符**，默认false-->
        <table tableName="pdm_%" enableCountByExample="false"
               enableUpdateByExample="false" enableDeleteByExample="false"
               enableSelectByExample="false" selectByExampleQueryId="false">
            <!--忽略列，不生成bean 字段-->
            <!--过滤掉id列-->
            <ignoreColumn column="id"/>
            <ignoreColumn column="gmt_created"/>
            <ignoreColumn column="gmt_modified"/>
        </table>
        <!--有些表的字段需要指定java类型
         <table schema="" tableName="">
            <columnOverride column="" javaType="" />
        </table>-->
    </context>
</generatorConfiguration>